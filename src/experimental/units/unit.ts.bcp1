import { GenerateAllUnitConverters } from './converters/all-converters';
import { meter } from './shortcuts/length';
import { INumericUnit, TNumericUnitOrValue } from './numeric/interfaces';
import { IsNumericUnit, NumericUnit } from './numeric/implementation';
import { IsUnit } from './implementation';
import { IsObject } from '../../misc/helpers/is/is-object';
import { mat3 } from 'gl-matrix';

// import { ReadonlySet } from '../../misc/readonly-set/implementation';


/*----*/

/*----------------*/


// export function NormalizeLengthUnit(value: TNumericUnitOrValue): INumericUnit {
//   return IsNumericUnit(value)
//     ? (
//       (value.unit === 'meter')
//         ? value
//         : new NumericUnit(value.toOptions<number>('meter'))
//     )
//     : (
//       IsUnit(value)
//         ? new NumericUnit(
//         (value.unit === 'meter')
//           ? value
//           : value.toOptions<number>('meter')
//         )
//         : new NumericUnit({
//           value: value,
//           unit: 'meter'
//         })
//     );
// }
//
// export function NormalizeLengthUnitToMeter(value: TNumericUnitOrValue): number {
//   return IsUnit(value)
//     ? (
//       (value.unit === 'meter')
//         ? value.value
//         : value.toOptions<number>('meter').value
//     )
//     : value;
// }
//
// export interface IPCBItemOptions {
//   x: TNumericUnitOrValue;
//   y: TNumericUnitOrValue;
// }
//
// export interface IPCBItemRenderOptions {
//   layer: number;
//   layerColor: string;
// }
//
// export abstract class PCBItem {
//   public readonly x: INumericUnit; // meter
//   public readonly y: INumericUnit; // meter
//
//   protected constructor(options: IPCBItemOptions) {
//     this.x = NormalizeLengthUnit(options.x);
//     this.y = NormalizeLengthUnit(options.y);
//   }
//
//   // abstract render(): void;
// }
//
// // export abstract class PCBItem {
// //   public readonly x: number; // meter
// //   public readonly y: number; // meter
// //
// //   protected constructor(options: IPCBItemOptions) {
// //     this.x = NormalizeLengthUnitToMeter(options.x);
// //     this.y = NormalizeLengthUnitToMeter(options.y);
// //   }
// // }
//
// export interface IPCBCopperOptions extends IPCBItemOptions {
//   layer: number;
// }
//
// export class PCBCopper extends PCBItem {
//
//   public readonly layer: number;
//
//   constructor(options: IPCBCopperOptions) {
//     super(options);
//     this.layer = options.layer;
//   }
// }
//
//
//
// export class PCBHole extends PCBItem {
//
//   public readonly layer: number;
//
//   constructor(options: IPCBCopperOptions) {
//     super(options);
//     this.layer = options.layer;
//   }
// }
//

/*----------------*/

export interface IVector2DOptions {
  x: number;
  y: number;
}

export class Vector2D implements IVector2DOptions {
  static get nullVector(): Vector2D {
    return new Vector2D({
      x: 0,
      y: 0,
    })
  }

  public readonly x: number;
  public readonly y: number;

  constructor(x: number, y: number);
  constructor(options: IVector2DOptions);
  constructor(...args: any[]) {
    if (
      (args.length === 1)
      && IsObject(args[0])
    ) {
      this.x = (args[0] as IVector2DOptions).x;
      this.y = (args[0] as IVector2DOptions).y;
    } else if (
      (args.length === 2)
      && (typeof args[0] === 'number')
      &&  (typeof args[1] === 'number')
    ) {
      this.x = (args[0] as number);
      this.y = (args[1] as number);
    } else {
      throw new TypeError(`Expected [IVector2DOptions] or [number, number] as Vector2D constructor's arguments`);
    }
  }

  clone(): Vector2D {
    return new Vector2D(this);
  }

  add(options: IVector2DOptions): Vector2D {
    return new Vector2D({
      x: this.x + options.x,
      y: this.y + options.y,
    });
  }

  mul(value: number): Vector2D {
    return new Vector2D({
      x: this.x * value,
      y: this.y * value,
    });
  }
}

export const NULL_VECTOR_2D = new Vector2D({
  x: 0,
  y: 0,
});


export interface IShape2DSegmentOptions {
}

export abstract class Shape2DSegment {
  protected constructor(options: IShape2DSegmentOptions) {
  }

  abstract appendToPath2D(origin: Vector2D, path2D: Path2D): Vector2D;
}

export interface ILineShape2DSegmentOptions extends IShape2DSegmentOptions {
  endPoint: Vector2D;
}

export class Line extends Shape2DSegment implements ILineShape2DSegmentOptions {
  public readonly endPoint: Vector2D;

  constructor(x: number, y: number);
  constructor(endPoint: Vector2D);
  constructor(options: ILineShape2DSegmentOptions);
  constructor(...args: any[]) {
    let options: ILineShape2DSegmentOptions;
    if (
      (args.length === 1)
      && IsObject(args[0])
    ) {
      if ('endPoint' in args[0]) {
        options = args[0] as ILineShape2DSegmentOptions;
      } else {
        options = {
          endPoint: args[0] as Vector2D,
        };
      }
    } else if (
      (args.length === 2)
      && (typeof args[0] === 'number')
      &&  (typeof args[1] === 'number')
    ) {
      options = {
        endPoint: new Vector2D({
          x: args[0] as number,
          y: args[1] as number,
        })
      };
    } else {
      throw new TypeError(`Expected [ILineShape2DSegmentOptions], [Vector2D], [number, number] as LineTo constructor's arguments`);
    }

    super(options);
    this.endPoint = options.endPoint;
  }

  appendToPath2D(origin: Vector2D, path2D: Path2D): Vector2D {
    const endPoint: Vector2D = origin.add(this.endPoint);
    path2D.lineTo(endPoint.x, endPoint.y);
    return endPoint;
  }
}


// export interface ILineToShape2DSegmentOptions extends IShape2DSegmentOptions {
//   endPoint: Vector2D;
// }
//
// export class LineTo extends Line implements ILineToShape2DSegmentOptions {
//   public readonly endPoint: Vector2D;
//
//   constructor(x: number, y: number);
//   constructor(endPoint: Vector2D);
//   constructor(options: ILineToShape2DSegmentOptions);
//   constructor(...args: any[]) {
//     let options: ILineToShape2DSegmentOptions;
//     if (
//       (args.length === 1)
//       && IsObject(args[0])
//     ) {
//       if ('endPoint' in args[0]) {
//         options = args[0] as ILineToShape2DSegmentOptions;
//       } else {
//         options = {
//           endPoint: args[0] as Vector2D,
//         };
//       }
//     } else if (
//       (args.length === 2)
//       && (typeof args[0] === 'number')
//       &&  (typeof args[1] === 'number')
//     ) {
//       options = {
//         endPoint: new Vector2D({
//           x: args[0] as number,
//           y: args[1] as number,
//         })
//       };
//     } else {
//       throw new TypeError(`Expected [ILineToShape2DSegmentOptions], [Vector2D], [number, number] as LineTo constructor's arguments`);
//     }
//
//     super(options);
//     this.endPoint = options.endPoint;
//   }
//
//   appendToPath2D(origin: Vector2D, path2D: Path2D): Vector2D {
//     path2D.lineTo(this.endPoint.x, this.endPoint.y);
//     return this.endPoint;
//   }
// }
//

export interface IArcShape2DSegmentOptions extends IShape2DSegmentOptions {
  center: Vector2D;
  angle: number;
}

export class Arc extends Shape2DSegment implements IArcShape2DSegmentOptions {
  public readonly center: Vector2D;
  public readonly angle: number;

  constructor(options: IArcShape2DSegmentOptions) {
    super(options);
    this.center = options.center;
    this.angle = options.angle;
  }

  appendToPath2D(origin: Vector2D, path2D: Path2D): Vector2D {
    const radius: number = Math.sqrt(
      Math.pow(this.center.x, 2)
      + Math.pow(this.center.y, 2)
    );
    const startAngle: number = Math.atan2(-this.center.y, -this.center.x);
    const endAngle: number = startAngle + this.angle;

    // console.log('startAngle', startAngle);

    path2D.arc(
      origin.x + this.center.x,
      origin.y + this.center.y,
      radius,
      startAngle,
      endAngle,
      false
    );

    return new Vector2D({
      x: (Math.cos(endAngle) * radius) + origin.x + this.center.x,
      y: (Math.sin(endAngle) * radius) + origin.y + this.center.y,
    });
  }
}


export interface ICircleShape2DSegmentOptions extends Omit<IArcShape2DSegmentOptions, 'angle'> {
}

export class Circle extends Arc implements ICircleShape2DSegmentOptions {
  constructor(options: ICircleShape2DSegmentOptions) {
    super({
      ...options,
      angle: Math.PI  * 2
    });
  }
}


export interface IRectangleShape2DSegmentOptions extends IShape2DSegmentOptions {
  size: Vector2D;
}

export class Rectangle extends Shape2DSegment implements IRectangleShape2DSegmentOptions {
  public readonly size: Vector2D;

  constructor(options: IRectangleShape2DSegmentOptions) {
    super(options);
    this.size = options.size;
  }

  get width(): number {
    return this.size.x;
  }

  get height(): number {
    return this.size.y;
  }

  appendToPath2D(origin: Vector2D, path2D: Path2D): Vector2D {
    path2D.rect(origin.x, origin.y, this.size.x, this.size.y);
    return origin;
  }
}


export interface ISquareShape2DSegmentOptions extends IShape2DSegmentOptions {
  side: number;
}

export class Square extends Rectangle implements ISquareShape2DSegmentOptions {
  constructor(options: ISquareShape2DSegmentOptions) {
    super({
      ...options,
      size: new Vector2D({
        x: options.side,
        y: options.side,
      }),
    });
  }

  get side(): number {
    return this.size.x;
  }
}

/*--*/

export interface IShape2DOptions {
  origin: Vector2D;
  segments: Shape2DSegment[];
}

export abstract class Shape2D implements IShape2DOptions {
  public readonly origin: Vector2D;
  public readonly segments: Shape2DSegment[];

  protected constructor(x: number, y: number, segments: Shape2DSegment[]);
  protected constructor(origin: Vector2D, segments: Shape2DSegment[]);
  protected constructor(options: IShape2DOptions);
  protected constructor(...args: any[]) {
    let options: IShape2DOptions;
    if (
      (args.length === 1)
      && IsObject(args[0])
    ) {
      options = args[0] as IShape2DOptions;
    } else if (
      (args.length === 2)
      && IsObject(args[0])
      && Array.isArray(args[1])
    ) {
      options = {
        origin: args[0] as Vector2D,
        segments: args[1] as Shape2DSegment[],
      };
    } else if (
      (args.length === 3)
      && (typeof args[0] === 'number')
      &&  (typeof args[1] === 'number')
      && Array.isArray(args[2])
    ) {
      options = {
        origin: new Vector2D({
          x: args[0] as number,
          y: args[1] as number,
        }),
        segments: args[2] as Shape2DSegment[],
      };
    } else {
      throw new TypeError(`Expected [IShape2DOptions], [Vector2D, Shape2DSegment[]], [number, number, Shape2DSegment[]] as Shape2D constructor's arguments`);
    }

    this.origin = options.origin;
    this.segments = options.segments;
  }

  toPath2D(): Path2D {
    const path2D: Path2D = new Path2D();
    let origin: Vector2D = this.origin.clone();
    path2D.moveTo(origin.x, origin.y);
    for (let i = 0, l = this.segments.length; i < l; i++) {
      origin = this.segments[i].appendToPath2D(origin, path2D);
    }
    return path2D;
  }

  abstract draw(context: CanvasRenderingContext2D): void;
}


export interface IAreaShape2DOptions extends IShape2DOptions {
}

export class Area extends Shape2D implements IAreaShape2DOptions {
  constructor(x: number, y: number, segments: Shape2DSegment[]);
  constructor(origin: Vector2D, segments: Shape2DSegment[]);
  constructor(options: IShape2DOptions);
  constructor(...args: any[]) {
    // @ts-ignore
    super(...args);
  }

  draw(context: CanvasRenderingContext2D): void {
    context.fill(this.toPath2D());
  }
}


export interface IPerimeterShape2DOptions extends IShape2DOptions {
  thickness: number;
}

export class Perimeter extends Shape2D implements IPerimeterShape2DOptions {
  public readonly thickness: number;

  constructor(options: IPerimeterShape2DOptions) {
    super(options);
    this.thickness = options.thickness;
  }

  draw(context: CanvasRenderingContext2D): void {
    context.lineWidth = this.thickness;
    context.stroke(this.toPath2D());
  }
}


export interface ITextShape2DOptions extends IShape2DOptions {
  text: string;
}

export class TextShape extends Shape2D implements ITextShape2DOptions {
  public readonly text: string;

  constructor(options: ITextShape2DOptions) {
    super(options);
    this.text = options.text;
  }

  draw(context: CanvasRenderingContext2D): void {
    context.fillText(this.text, this.origin.x, this.origin.y);
  }
}



function CreateCanvas(width: number, height: number): CanvasRenderingContext2D {
  const canvas: HTMLCanvasElement = document.createElement('canvas');

  canvas.width = width;
  canvas.height = height;
  canvas.style.width = `${ width }px`;
  canvas.style.height = `${ height }px`;
  canvas.style.border = `2px solid black`;
  canvas.style.imageRendering = 'pixelated';

  document.body.appendChild(canvas);

  return canvas.getContext('2d') as CanvasRenderingContext2D;
}


export function testShapes() {
  const ctx = CreateCanvas(512, 512);
  ctx.lineJoin = 'bevel';

  const origin: Vector2D = new Vector2D({
    x: ctx.canvas.width / 2,
    y: ctx.canvas.height / 2,
  });

  const center = new Path2D();
  center.arc(origin.x, origin.y, 5,  0, Math.PI * 2);
  ctx.fillStyle = 'red';
  ctx.fill(center);
  ctx.fillStyle = 'black';

  let shapes: Shape2D[] = [
    new Perimeter({
      origin,
      thickness: 2,
      segments: [
        new Line({
          endPoint: new Vector2D({
            x: 50,
            y: 50,
          })
        })
      ]
    }),

    new Perimeter({
      origin,
      thickness: 2,
      segments: [
        new Rectangle({
          size: new Vector2D({
            x: 50,
            y: 50,
          })
        })
      ]
    }),

    new Perimeter({
      origin,
      thickness: 2,
      segments: [
        new Arc({
          center: new Vector2D({
            x: 50,
            y: 0,
          }),
          angle: Math.PI / 2,
        }),
        new Arc({
          center: new Vector2D({
            x: 0,
            y: 50,
          }),
          angle: Math.PI / 2,
        }),
        new Line({
          endPoint: new Vector2D({
            x: -50,
            y: 0,
          })
        })
      ]
    }),

    new Perimeter({
      origin,
      thickness: 2,
      segments: [
        new Circle({
          center: new Vector2D({
            x: 50,
            y: 50,
          }),
        }),
      ]
    })

  ];

  shapes[3].draw(ctx);
}


/*----------------*/

export interface IPCBPartOptions {
  transform: mat3;
}

export abstract class PCBPart implements IPCBPartOptions {
  readonly transform: mat3;

  protected constructor(options: IPCBPartOptions) {
    this.transform = options.transform;
  }
}


export interface IPCBPartWithShapeOptions extends IPCBPartOptions {
  shape: Shape2D;
}

export abstract class PCBPartWithShape extends PCBPart implements IPCBPartWithShapeOptions {
  readonly shape: Shape2D;

  protected constructor(options: IPCBPartWithShapeOptions) {
    super(options);
    this.shape = options.shape;
  }
}


export interface IPCBCopperOptions extends IPCBPartWithShapeOptions {
  layer: number;
}

export class PCBCopper extends PCBPartWithShape implements IPCBCopperOptions {
  public readonly layer: number;

  constructor(options: IPCBCopperOptions) {
    super(options);
    this.layer = options.layer;
  }

  getAbsoluteLayer(layers: number): number {
    const layer: number = (this.layer < 0)
      ? (layers - this.layer)
      : this.layer;

    if ((0 <= layer) && (layer < layers)) {
      return layer;
    } else {
      throw new RangeError(`Layer is outside of the board layers range [0, ${ layers }], found ${ this.layer } resolved as ${ layer }`);
    }
  }
}


export interface IPCBHoleOptions extends IPCBPartWithShapeOptions {
}

export class PCBHole extends PCBPartWithShape implements IPCBHoleOptions {
  constructor(options: IPCBPartWithShapeOptions) {
    super(options);
  }
}


export interface IPCBBoardOptions extends IPCBPartWithShapeOptions {
  parts: PCBPart[];
  layers: number;
  shape: Perimeter;
}

export interface IPCBBoardDrawOptions {
  layerColors: string[];
  boardColor: string;
}

export class PCBBoard extends PCBPartWithShape implements IPCBBoardOptions {
  readonly parts: PCBPart[];
  readonly layers: number;
  readonly shape: Perimeter;

  constructor(options: IPCBBoardOptions) {
    super(options);
    this.layers = options.layers;
    this.parts = options.parts;
  }

  getPCBParts<T extends PCBPart>(type: new(...args: any) => T): T[] {
    return this.parts.filter<T>((part: PCBPart): part is T => {
      return (part instanceof type);
    });
  }

  getHoles(): PCBHole[] {
    return this.getPCBParts<PCBHole>(PCBHole);
  }

  getCopperParts(): PCBCopper[] {
    return this.getPCBParts<PCBCopper>(PCBCopper);
  }

  getLayers(): PCBCopper[][] {
    const layers: PCBCopper[][] = Array.from({ length: this.layers }, () => []);
    const copperParts: PCBCopper[] = this.getCopperParts();
    for (let i = 0, l = copperParts.length; i < l; i++) {
      const copperPart: PCBCopper = copperParts[i];
      layers[copperPart.getAbsoluteLayer(this.layers)].push(copperPart);
    }
    return layers;
  }

  draw(context: CanvasRenderingContext2D, options: IPCBBoardDrawOptions): void {
    context.save();
    context.translate(this.transform.x, this.transform.y);
    this.drawLayers(context, options);
    this.drawBoard(context, options);
    context.restore();
  }

  protected drawBoard(context: CanvasRenderingContext2D, options: IPCBBoardDrawOptions): void {
    context.strokeStyle = options.boardColor;
    this.shape.draw(context);
  }

  protected drawLayers(context: CanvasRenderingContext2D, options: IPCBBoardDrawOptions): void {
    const layers: PCBCopper[][] = this.getLayers();
    for (let layerIndex = 0, layersLength = layers.length; layerIndex < layersLength; layerIndex++) {
      const layer: PCBCopper[] = layers[layerIndex];
      context.fillStyle = options.layerColors[layerIndex];
      context.strokeStyle = options.layerColors[layerIndex];
    }
  }
}

/*---*/

export interface IPCBPadOptions extends Omit<IPCBCopperOptions, 'shape'> {
  size: Vector2D;
}

export class PCBPad extends PCBCopper implements IPCBPadOptions {
  public readonly layer: number;

  constructor(options: IPCBPadOptions) {
    super({
      ...options,
      shape: new Area({
        origin: NULL_VECTOR_2D,
        segments: [
          new Rectangle({
            size: options.size,
          })
        ]
      })
    });
    this.layer = options.layer;
  }

  get size(): Vector2D {
    return (this.shape.segments[0] as Rectangle).size;
  }

  getAbsoluteLayer(layers: number): number {
    const layer: number = (this.layer < 0)
      ? (layers - this.layer)
      : this.layer;

    if ((0 <= layer) && (layer < layers)) {
      return layer;
    } else {
      throw new RangeError(`Layer is outside of the board layers range [0, ${ layers }], found ${ this.layer } resolved as ${ layer }`);
    }
  }
}


/*---*/

export function testPCBBoard() {
  const ctx = CreateCanvas(512, 512);
  ctx.lineJoin = 'bevel';

  function DrawBackground(context: CanvasRenderingContext2D) {
    context.fillStyle = 'black';
    context.beginPath();
    context.rect(0, 0, context.canvas.width, context.canvas.height);
    context.fill();
  }

  const boardDrawOptions: IPCBBoardDrawOptions = {
    boardColor: 'yellow',
    layerColors: [
      'red',
      'blue'
    ],
  };

  const board = new PCBBoard({
    layers: 2,
    transform: new Vector2D({
      x: 10,
      y: 10,
    }),
    shape: new Perimeter({
      origin: NULL_VECTOR_2D,
      thickness: 2,
      segments: [
        new Rectangle({
          size: new Vector2D({
            x: 200,
            y: 200,
          })
        })
      ],
    }),
    parts: [
      new PCBPad({
        transform: NULL_VECTOR_2D,
        layer: 0,
        size: new Vector2D({
          x: 50,
          y: 50,
        })
      })
    ],

  });

  DrawBackground(ctx);
  board.draw(ctx, boardDrawOptions);
}


/*----------*/

export function testPCB() {
  // testShapes();
  testPCBBoard();
}

/*----------------*/



export function testUnit() {
  GenerateAllUnitConverters();

  // console.log(GetTypeConverters('m', 'in'));
  // console.log(GetTypeConverterOrThrow('meter', 'metre')(0.3));
  // console.log(GetTypeConverterOrThrow('meter', 'm')(0.3));
  // console.log(GetTypeConverterOrThrow('m', 'cm')(0.3));
  // console.log(GetTypeConverterOrThrow('mm', 'cm')(15));
  //
  // console.log(GetTypeConverterOrThrow('in', 'cm')(1));
  // console.log(GetTypeConverterOrThrow('cm', 'in')(2.54 * 4));
  // console.log(GetTypeConverterOrThrow('th', 'mm')(1));
  // console.log(GetTypeConverterOrThrow('minute', 'second')(1));
  //
  // console.log(GetTypeConverterOrThrow('minute', 'meter')(1));

  // console.log(GetTypeConverterOrThrow('degree', 'radian')(180));
  // console.log(GetTypeConverterOrThrow('rad', 'deg')(Math.PI / 2));

  // console.log(GetTypeConverterOrThrow('celcius', 'kelvin')(0));
  // console.log(GetTypeConverterOrThrow('celcius', '°F')(0));

  // console.log(meter(1).add(mm(1000)).sub(cm(10)).to('cm').toString());
  // console.log(NumericUnit.mean(fahrenheit(32), kelvin(273.15)).to('°C').toString());

  testPCB();
}
